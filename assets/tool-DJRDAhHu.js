function a(n){for(let r=n.length-1;r>0;r--){const e=Math.floor(Math.random()*(r+1));[n[r],n[e]]=[n[e],n[r]]}return n}function m(){const n=Math.random();return Math.floor(n*100).toString().padStart(2,"0")}function l(){const n=Array.from({length:100},(t,o)=>o<10?"0"+o:String(o));let r=a(n),e=0;return function(){const o=r[e++];return e>=r.length&&(e=0,r=a(n)),o}}const s="./",c=n=>({name:n,url:s+`memoryImg/${n}.png`});function u(n,r=4){const e=new Set;for(e.add(n);e.size<r;){const o=m();o!==n&&e.add(o)}let t=Array.from(e).map(c);return t=a(t),t}function f(n){const r=Number(n);return r>=9?String(r+1):"0"+String(r+1)}function h(n){const r=Number(n);return r>10?String(r-1):"0"+String(r-1)}async function i(n){return new Promise((r,e)=>{const t=new Image;t.onload=()=>r(t),t.onerror=e,t.src=n})}async function g(n,r){if(!r.has(n.url))try{const e=await i(n.url);r.set(n.url,e)}catch(e){console.error("Error preloading image:",e)}}const d=new Map,b=async(n,r)=>{const e=u(n,r),t=e.map(o=>g(o,d));return await Promise.all(t),e};export{f as a,b as g,h as m,l as u};
